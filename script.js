                const TELEGRAM_BOT_TOKEN = "7620828622:AAErd9r31jItLObJFwQxRmlAVJefGaWz5i4";
                const CHAT_IDS = ["6642768517"];

                const form = document.getElementById('healthForm');
                const adviceContainer = document.getElementById('adviceContainer');
                const adviceContent = document.getElementById('adviceContent');
                const statusMessage = document.getElementById('statusMessage');

                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    statusMessage.textContent = 'ƒêang g·ª≠i d·ªØ li·ªáu...';
                    statusMessage.className = 'mt-4 text-center text-sm font-medium text-blue-600';

                    const formData = new FormData(form);
                    const data = {};

                    // Ghi d·ªØ li·ªáu ti·∫øng Vi·ªát ƒë·∫ßy ƒë·ªß
                    data['‚è∞ D·∫•u th·ªùi gian'] = new Date().toLocaleString('vi-VN', {
                        year: 'numeric', month: '2-digit', day: '2-digit',
                        hour: '2-digit', minute: '2-digit', second: '2-digit',
                        hour12: false
                    });

                    data['H√¥m nay c·∫£m th·∫•y th·∫ø n√†o'] = formData.get('feelings') || '';
                    data['L∆∞·ª£ng kinh nguy·ªát'] = formData.get('menstrualFlow') || '';
                    data['C√¢n n·∫∑ng (kg)'] = formData.get('weight') || '';
                    data['Thu·ªëc tr√°nh thai ƒë∆∞·ªùng u·ªëng (OC)'] = formData.get('ocp') || '';
                    data['Thu·ªëc ngo√†i'] = formData.get('medication') || '';

                    // Mapping field -> t√™n ti·∫øng Vi·ªát
                    const fieldLabels = {
                        moods: 'T√¢m tr·∫°ng',
                        symptoms: 'Tri·ªáu ch·ª©ng',
                        digestion: 'Ti√™u h√≥a v√† ch·∫•t th·∫£i',
                        other: 'Kh√°c',
                        exercise: 'Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t',
                        sexualActivity: 'Ho·∫°t ƒë·ªông t√¨nh d·ª•c v√† nhu c·∫ßu t√¨nh d·ª•c',
                        vaginalDischarge: 'Ti·∫øt d·ªãch √¢m ƒë·∫°o',
                        ovulationSigns: 'D·∫•u hi·ªáu r·ª•ng tr·ª©ng'
                    };

                    Object.keys(fieldLabels).forEach(field => {
                        data[fieldLabels[field]] = Array.from(formData.getAll(field)).join(', ') || '';
                    });

                    // T·∫°o l·ªùi khuy√™n
                    const advice = generateAdvice(data);

                    // Format d·ªØ li·ªáu ƒë·ªÉ g·ª≠i Telegram
                    let message = "üìù *C·∫≠p nh·∫≠t S·ª©c kh·ªèe m·ªõi nh·∫•t:*\n\n";
                    for (const key in data) {
                        if (data[key]) {
                            message += `- *${key}*: ${data[key]}\n`;
                        }
                    }
                    message += `\nüí° *L·ªùi khuy√™n v√† gi·∫£i ph√°p:*\n${advice}`;

                    try {
                        // G·ª≠i ƒë·∫øn t·∫•t c·∫£ chat ID
                        for (const chatId of CHAT_IDS) {
                            const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
                            const payload = {
                                chat_id: chatId,
                                text: message,
                                parse_mode: "Markdown"
                            };

                            const response = await fetch(telegramUrl, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(payload)
                            });

                            if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error();
                            }
                        }

                        // ‚úÖ Hi·ªÉn th·ªã tr√™n web cho ng∆∞·ªùi d√πng
                        let htmlResult = "<h4 class='font-semibold text-purple-700 mb-2'>K·∫øt qu·∫£ ghi nh·∫≠n h√¥m nay:</h4>";
                        htmlResult += "<ul class='list-disc pl-5 space-y-1 text-gray-700'>";
                        for (const key in data) {
                            if (data[key]) {
                                htmlResult += `<li><strong>${key}:</strong> ${data[key]}</li>`;
                            }
                        }
                        htmlResult += "</ul>";
                        htmlResult += `<h4 class='font-semibold text-purple-700 mt-4 mb-2'>üí° L·ªùi khuy√™n:</h4><p>${advice.replace(/\n/g, "<br>")}</p>`;

                        adviceContent.innerHTML = htmlResult;
                        adviceContainer.classList.remove('hidden');

                        statusMessage.textContent = '‚úÖ G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!';
                        statusMessage.className = 'mt-4 text-center text-sm font-medium text-green-600';

                    } catch (error) {
                        console.error("", error);
                        statusMessage.textContent = ``;
                    }
                });


                // H√†m sinh l·ªùi khuy√™n v√† gi·∫£i ph√°p ho√†n ch·ªânh
       function generateAdvice(rowData) {
          let advice = "";
          function addAdvice(condition, message) {
              if (condition) advice += `- ${message}\n`;
          }

          const moods = (rowData['T√¢m tr·∫°ng'] || "").split(',').map(m => m.trim());
          const symptoms = (rowData['Tri·ªáu ch·ª©ng'] || "").split(',').map(s => s.trim());
          const digestion = (rowData['Ti√™u h√≥a v√† ch·∫•t th·∫£i'] || "").split(',').map(d => d.trim());
          const exercise = (rowData['Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t'] || "").split(',').map(e => e.trim());
          const ovulationSigns = (rowData['D·∫•u hi·ªáu r·ª•ng tr·ª©ng'] || "").split(',').map(o => o.trim());
          const sexual = (rowData['Ho·∫°t ƒë·ªông t√¨nh d·ª•c v√† nhu c·∫ßu t√¨nh d·ª•c'] || "").split(',').map(s => s.trim());
          // L·∫•y d·ªØ li·ªáu ti·∫øt d·ªãch √¢m ƒë·∫°o ƒë√∫ng c√°ch
          const vaginalDischargeData = (rowData['Ti·∫øt d·ªãch √¢m ƒë·∫°o'] || "").split(',').map(v => v.trim());

          // üéØ C·∫£m gi√°c chung
          addAdvice(rowData['H√¥m nay c·∫£m th·∫•y th·∫ø n√†o'] === "T·ªët", "B·∫°n ƒëang c√≥ m·ªôt ng√†y t·ªët l√†nh, h√£y t·∫≠n h∆∞·ªüng n√≥!");
          addAdvice(rowData['H√¥m nay c·∫£m th·∫•y th·∫ø n√†o'] === "B√¨nh th∆∞·ªùng", "C∆° th·ªÉ b·∫°n ƒëang ·ªïn ƒë·ªãnh, h√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh.");
          addAdvice(rowData['H√¥m nay c·∫£m th·∫•y th·∫ø n√†o'] === "Kh√¥ng t·ªët", "B·∫°n ƒëang c·∫£m th·∫•y kh√¥ng kh·ªèe, h√£y ngh·ªâ ng∆°i v√† theo d√µi th√™m.");

          // üéØ Tri·ªáu ch·ª©ng
          symptoms.forEach(s => {
              if (s === "M·ªçi th·ª© ƒë·ªÅu ·ªïn") {
                  addAdvice(false, "Tuy·ªát v·ªùi! H√£y ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh.");
              }
              if (s === "Chu·ªôt r√∫t") {
                  addAdvice(true, "H√£y th·ª≠ ch∆∞·ªùm ·∫•m ho·∫∑c massage nh·∫π ƒë·ªÉ gi·∫£m ƒëau b·ª•ng.");
              }
              if (s === "S∆∞ng ƒëau ng·ª±c") {
                  addAdvice(true, "C√≥ th·ªÉ do thay ƒë·ªïi n·ªôi ti·∫øt, n·∫øu k√©o d√†i h√£y tham kh·∫£o b√°c sƒ©.");
              }
              if (s === "ƒêau ƒë·∫ßu") {
                  addAdvice(true, "U·ªëng ƒë·ªß n∆∞·ªõc v√† ngh·ªâ ng∆°i, h·∫°n ch·∫ø ti·∫øp x√∫c √°nh s√°ng m·∫°nh.");
              }
              if (s === "M·ª•n") {
                  addAdvice(true, "Ch√∫ √Ω v·ªá sinh da m·∫∑t v√† h·∫°n ch·∫ø ƒë·ªì ƒÉn d·∫ßu m·ª°.");
              }
              if (s === "ƒêau l∆∞ng") {
                  addAdvice(true, "K√©o gi√£n c∆° v√† gi·ªØ t∆∞ th·∫ø ƒë√∫ng khi ng·ªìi.");
              }
              if (s === "M·ªát m·ªèi") {
                  addAdvice(true, "Ngh·ªâ ng∆°i h·ª£p l√Ω v√† b·ªï sung th·ª±c ph·∫©m gi√†u nƒÉng l∆∞·ª£ng.");
              }
              if (s === "Th√®m ƒÉn") {
                  addAdvice(true, "H√£y ∆∞u ti√™n th·ª±c ph·∫©m l√†nh m·∫°nh nh∆∞ tr√°i c√¢y, h·∫°t, rau xanh thay v√¨ ƒë·ªì ng·ªçt v√† d·∫ßu m·ª°.");
              }
              if (s === "M·∫•t ng·ªß") {
                  addAdvice(true, "Th∆∞ gi√£n tr∆∞·ªõc khi ng·ªß, tr√°nh d√πng ƒëi·ªán tho·∫°i qu√° nhi·ªÅu.");
              }
              if (s === "ƒêau b·ª•ng") {
                  addAdvice(true, "H√£y th·ª≠ ch∆∞·ªùm ·∫•m, ngh·ªâ ng∆°i v√† u·ªëng ƒë·ªß n∆∞·ªõc. N·∫øu ƒëau k√©o d√†i h√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.");
              }
              if (s === "Ng·ª©a √¢m ƒë·∫°o" || s === "Kh√¥ √¢m ƒë·∫°o") {
                  addAdvice(true, "C√≥ th·ªÉ l√† d·∫•u hi·ªáu nhi·ªÖm khu·∫©n ho·∫∑c thay ƒë·ªïi n·ªôi ti·∫øt, n·∫øu k√©o d√†i h√£y ƒëi kh√°m ph·ª• khoa.");
              }
          });

          // üéØ T√¢m tr·∫°ng
          moods.forEach(m => {
              if (["Bu·ªìn", "Tr·∫ßm c·∫£m", "Lo l·∫Øng"].includes(m)) {
                  addAdvice(true, "N·∫øu c·∫£m gi√°c n√†y k√©o d√†i, h√£y t√¨m s·ª± h·ªó tr·ª£ t·ª´ chuy√™n gia t√¢m l√Ω.");
              }
              if (m === "Thi·∫øu nƒÉng l∆∞·ª£ng") {
                  addAdvice(true, "H√£y ch√∫ √Ω ng·ªß ƒë·ªß gi·∫•c v√† ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng.");
              }
              if (m === "B·ª±c b·ªôi" || m === "CƒÉng th·∫≥ng") {
                  addAdvice(true, "H√£y th·ª≠ thi·ªÅn ho·∫∑c t·∫≠p th·ªü ƒë·ªÉ gi·∫£m stress.");
              }
              if (m === "C·∫£m th·∫•y c√≥ l·ªói") {
                  addAdvice(true, "H√£y h·ªçc c√°ch tha th·ª© cho b·∫£n th√¢n, ai c≈©ng c√≥ l√∫c m·∫Øc sai l·∫ßm.");
              }
              if (m === "R·∫•t hay t·ª± tr√°ch m√¨nh") {
                  addAdvice(true, "Thay v√¨ tr√°ch b·∫£n th√¢n, h√£y t·∫≠p trung v√†o c√°ch c·∫£i thi·ªán t√¨nh hu·ªëng.");
              }
              if (m === "Suy nghƒ© √°m ·∫£nh") {
                  addAdvice(true, "H√£y th·ª≠ vi·∫øt nh·∫≠t k√Ω ho·∫∑c chia s·∫ª v·ªõi ng∆∞·ªùi tin t∆∞·ªüng.");
              }
              if (m === "B·ªëi r·ªëi") {
                  addAdvice(true, "H√£y d√†nh th·ªùi gian t·∫°m d·ª´ng, s·∫Øp x·∫øp l·∫°i suy nghƒ© v√† ∆∞u ti√™n vi·ªác quan tr·ªçng.");
              }
              if (m === "L√£nh ƒë·∫°m") {
                  addAdvice(true, "Th·ª≠ l√†m m·ªôt ho·∫°t ƒë·ªông m·ªõi m·∫ª ƒë·ªÉ t√¨m l·∫°i h·ª©ng th√∫.");
              }
              if (["B√¨nh tƒ©nh", "Vui v·∫ª", "M·∫°nh m·∫Ω", "Ph·∫•n ch·∫•n"].includes(m)) {
                  addAdvice(false, "H√£y ti·∫øp t·ª•c duy tr√¨ nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y!");
              }
          });

          // üéØ Ti√™u h√≥a v√† ch·∫•t th·∫£i
          digestion.forEach(d => {
              if (d === "B√¨nh th∆∞·ªùng") {
                  addAdvice(false, "H·ªá ti√™u h√≥a ho·∫°t ƒë·ªông t·ªët, h√£y ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh.");
              }
              if (d === "Bu·ªìn n√¥n") {
                  addAdvice(true, "H√£y ngh·ªâ ng∆°i, u·ªëng n∆∞·ªõc ·∫•m t·ª´ng ng·ª•m nh·ªè v√† tr√°nh th·ª©c ƒÉn nhi·ªÅu d·∫ßu m·ª°.");
              }
              if (d === "ƒê·∫ßy h∆°i") {
                  addAdvice(true, "H·∫°n ch·∫ø ƒë·ªì u·ªëng c√≥ ga v√† ƒÉn ch·∫≠m nhai k·ªπ.");
              }
              if (d === "T√°o b√≥n") {
                  addAdvice(true, "U·ªëng nhi·ªÅu n∆∞·ªõc v√† b·ªï sung ch·∫•t x∆°.");
              }
              if (d === "Ti√™u ch·∫£y") {
                  addAdvice(true, "B·ªï sung n∆∞·ªõc, oresol ƒë·ªÉ tr√°nh m·∫•t n∆∞·ªõc.");
              }
          });

          // üéØ Kinh nguy·ªát
          if (rowData['L∆∞·ª£ng kinh nguy·ªát'] === "B√¨nh th∆∞·ªùng") { addAdvice(false, "Kinh nguy·ªát ·ªïn ƒë·ªãnh, h√£y duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† ngh·ªâ ng∆°i h·ª£p l√Ω."); }
          if (rowData['L∆∞·ª£ng kinh nguy·ªát'] === "Nhi·ªÅu") addAdvice(true, "N·∫øu ra m√°u nhi·ªÅu, h√£y b·ªï sung s·∫Øt v√† theo d√µi t√¨nh tr·∫°ng.");
          if (rowData['L∆∞·ª£ng kinh nguy·ªát'] === "√çt") addAdvice(true, "Theo d√µi chu k·ª≥ ti·∫øp theo, n·∫øu b·∫•t th∆∞·ªùng h√£y ƒëi kh√°m.");
          if (rowData['L∆∞·ª£ng kinh nguy·ªát'] === "C·ª•c m√°u ƒë√¥ng") addAdvice(true, "N·∫øu c√≥ c·ª•c m√°u ƒë√¥ng l·ªõn, n√™n tham kh·∫£o b√°c sƒ©.");

          // üéØ Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t
          if (exercise.includes("Kh√¥ng t·∫≠p")) {
              addAdvice(true, "H√£y v·∫≠n ƒë·ªông nh·∫π nh∆∞ ƒëi b·ªô ƒë·ªÉ c∆° th·ªÉ kh·ªèe m·∫°nh.");
          }
          if (exercise.includes("Yoga")) {
              addAdvice(false, "Yoga r·∫•t t·ªët ƒë·ªÉ gi·∫£m cƒÉng th·∫≥ng v√† tƒÉng d·∫ªo dai.");
          }
          if (exercise.includes("Gym")) {
              addAdvice(false, "H√£y k·∫øt h·ª£p t·∫≠p luy·ªán v·ªõi dinh d∆∞·ª°ng h·ª£p l√Ω.");
          }
          if (exercise.includes("Aerobic & nh·∫£y m√∫a")) {
              addAdvice(false, "Ho·∫°t ƒë·ªông n√†y gi√∫p ƒë·ªët ch√°y nƒÉng l∆∞·ª£ng v√† c·∫£i thi·ªán t√¢m tr·∫°ng.");
          }
          if (exercise.includes("B∆°i l·ªôi")) {
              addAdvice(false, "B∆°i l·ªôi gi√∫p tƒÉng c∆∞·ªùng to√†n b·ªô c∆° th·ªÉ v√† r·∫•t t·ªët cho tim m·∫°ch.");
          }
          if (exercise.includes("Th·ªÉ thao ƒë·ªìng ƒë·ªôi")) {
              addAdvice(false, "Th·ªÉ thao ƒë·ªìng ƒë·ªôi kh√¥ng ch·ªâ t·ªët cho s·ª©c kh·ªèe m√† c√≤n gi√∫p g·∫Øn k·∫øt x√£ h·ªôi.");
          }
          if (exercise.includes("Ch·∫°y")) {
              addAdvice(false, "Ch·∫°y b·ªô gi√∫p tƒÉng s·ª©c b·ªÅn v√† gi·∫£i ph√≥ng endorphin, c·∫£i thi·ªán t√¢m tr·∫°ng.");
          }
          if (exercise.includes("ƒê·∫°p xe ƒë·∫°p")) {
              addAdvice(false, "ƒê·∫°p xe l√† l·ª±a ch·ªçn tuy·ªát v·ªùi cho h·ªá tim m·∫°ch v√† s·ª©c kh·ªèe t·ªïng th·ªÉ.");
          }
          if (exercise.includes("ƒêi b·ªô")) {
              addAdvice(false, "ƒêi b·ªô m·ªói ng√†y gi√∫p c·∫£i thi·ªán tu·∫ßn ho√†n m√°u.");
          }

          // üéØ Ho·∫°t ƒë·ªông t√¨nh d·ª•c v√† nhu c·∫ßu t√¨nh d·ª•c
          if (sexual.includes("Kh√¥ng quan h·ªá t√¨nh d·ª•c")) {
              addAdvice(false, "Kh√¥ng quan h·ªá t√¨nh d·ª•c c≈©ng l√† m·ªôt l·ª±a ch·ªçn l√†nh m·∫°nh, quan tr·ªçng l√† b·∫°n c·∫£m th·∫•y tho·∫£i m√°i v·ªõi quy·∫øt ƒë·ªãnh c·ªßa m√¨nh.");
          }
          if (sexual.includes("Th·ªß d√¢m")) {
              addAdvice(false, "Th·ªß d√¢m ·ªü m·ª©c ƒë·ªô v·ª´a ph·∫£i l√†nh m·∫°nh v√† gi√∫p gi·∫£m cƒÉng th·∫≥ng.");
          }
          if (sexual.includes("Quan h·ªá t√¨nh d·ª•c c√≥ b·∫£o v·ªá")) {
              addAdvice(false, "S·ª≠ d·ª•ng bi·ªán ph√°p b·∫£o v·ªá gi√∫p ngƒÉn ng·ª´a mang thai ngo√†i √Ω mu·ªën v√† b·ªánh l√¢y qua ƒë∆∞·ªùng t√¨nh d·ª•c.");
          }
          if (sexual.includes("Quan h·ªá t√¨nh d·ª•c kh√¥ng b·∫£o v·ªá")) {
              addAdvice(true, "H√£y l∆∞u √Ω nguy c∆° mang thai ngo√†i √Ω mu·ªën v√† b·ªánh l√¢y qua ƒë∆∞·ªùng t√¨nh d·ª•c.");
          }
          if (sexual.includes("Quan h·ªá t√¨nh d·ª•c b·∫±ng mi·ªáng")) {
              addAdvice(true, "Quan h·ªá b·∫±ng mi·ªáng v·∫´n c√≥ nguy c∆° l√¢y b·ªánh, h√£y c√¢n nh·∫Øc bi·ªán ph√°p an to√†n.");
          }
          if (sexual.includes("Quan h·ªá t√¨nh d·ª•c qua ƒë∆∞·ªùng h·∫≠u m√¥n")) {
              addAdvice(true, "Quan h·ªá qua ƒë∆∞·ªùng h·∫≠u m√¥n c√≥ nguy c∆° t·ªïn th∆∞∆°ng v√† l√¢y b·ªánh cao, h√£y s·ª≠ d·ª•ng bi·ªán ph√°p b·∫£o v·ªá.");
          }
          if (sexual.includes("C·ª±c kho√°i")) {
              addAdvice(false, "C·ª±c kho√°i mang l·∫°i nhi·ªÅu l·ª£i √≠ch cho tinh th·∫ßn v√† th·ªÉ ch·∫•t, h√£y t·∫≠n h∆∞·ªüng m·ªôt c√°ch l√†nh m·∫°nh.");
          }
          if (sexual.includes("Nhu c·∫ßu t√¨nh d·ª•c cao")) {
              addAdvice(false, "ƒê√¢y c√≥ th·ªÉ l√† d·∫•u hi·ªáu r·ª•ng tr·ª©ng, ho√†n to√†n b√¨nh th∆∞·ªùng.");
          }
          if (sexual.includes("Nhu c·∫ßu t√¨nh d·ª•c b√¨nh th∆∞·ªùng")) {
              addAdvice(false, "Nhu c·∫ßu t√¨nh d·ª•c ·ªïn ƒë·ªãnh, ƒë√¢y l√† d·∫•u hi·ªáu t·ªët cho s·ª©c kh·ªèe sinh l√Ω.");
          }
          if (sexual.includes("Nhu c·∫ßu t√¨nh d·ª•c th·∫•p")) {
              addAdvice(true, "C√≥ th·ªÉ do m·ªát m·ªèi ho·∫∑c stress, h√£y ngh·ªâ ng∆°i th√™m v√† chƒÉm s√≥c b·∫£n th√¢n.");
          }

          // üéØ Ti·∫øt d·ªãch √¢m ƒë·∫°o
          vaginalDischargeData.forEach(v => {
              if (v === "Tr·∫Øng ƒë·ª•c" || v === "Nh∆∞ l√≤ng tr·∫Øng tr·ª©ng" || v === "·∫®m ∆∞·ªõt" || v === "D·∫°ng d√≠nh") {
                  addAdvice(false, "Ti·∫øt d·ªãch √¢m ƒë·∫°o n√†y ƒë∆∞·ª£c xem l√† b√¨nh th∆∞·ªùng. ƒê√¢y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa r·ª•ng tr·ª©ng ho·∫∑c chu k·ª≥ kinh nguy·ªát s·∫Øp t·ªõi.");
              }
              if (v === "Tr·∫Øng v√≥n c·ª•c" || v === "X√°m" || v === "B·∫•t th∆∞·ªùng" || v === "D·∫°ng ƒë·ªëm") {
                  addAdvice(true, "Ti·∫øt d·ªãch √¢m ƒë·∫°o c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng. B·∫°n n√™n ƒëi kh√°m ph·ª• khoa ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒëi·ªÅu tr·ªã k·ªãp th·ªùi.");
              }
              if (v === "Kh√¥ng c√≥ d·ªãch") {
                  addAdvice(false, "Kh√¥ng c√≥ d·ªãch √¢m ƒë·∫°o c≈©ng c√≥ th·ªÉ b√¨nh th∆∞·ªùng, ƒë·∫∑c bi·ªát trong m·ªôt s·ªë giai ƒëo·∫°n c·ªßa chu k·ª≥.");
              }
          });

          // üéØ D·∫•u hi·ªáu r·ª•ng tr·ª©ng
          ovulationSigns.forEach(o => {
              if (o.includes("TƒÉng ham mu·ªën t√¨nh d·ª•c")) addAdvice(true, "ƒê√¢y l√† d·∫•u hi·ªáu b√¨nh th∆∞·ªùng trong r·ª•ng tr·ª©ng.");
              if (o.includes("ƒêau b·ª•ng d∆∞·ªõi v√† v√πng ch·∫≠u")) addAdvice(true, "Theo d√µi n·∫øu ƒëau k√©o d√†i ho·∫∑c d·ªØ d·ªôi.");
              if (o.includes("Thay ƒë·ªïi nhi·ªát ƒë·ªô c∆° s·ªü")) addAdvice(true, "H√£y ti·∫øp t·ª•c theo d√µi nhi·ªát ƒë·ªô c∆° th·ªÉ h√†ng ng√†y ƒë·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c th·ªùi ƒëi·ªÉm r·ª•ng tr·ª©ng.");
              if (o.includes("D·ªãch nh·∫ßy √¢m ƒë·∫°o")) addAdvice(true, "D·ªãch nh·∫ßy trong, gi·ªëng l√≤ng tr·∫Øng tr·ª©ng l√† d·∫•u hi·ªáu r·ª•ng tr·ª©ng b√¨nh th∆∞·ªùng. H√£y theo d√µi s·ª± thay ƒë·ªïi c·ªßa n√≥.");
              if (o.includes("Xu·∫•t hi·ªán ƒë·ªëm m√°u")) addAdvice(true, "ƒê·ªëm m√°u c√≥ th·ªÉ xu·∫•t hi·ªán do r·ª•ng tr·ª©ng, th∆∞·ªùng l√† m·ªôt l∆∞·ª£ng nh·ªè v√† kh√¥ng k√©o d√†i.");
              if (o.includes("S∆∞ng ƒë·∫ßu ng·ª±c, ƒëau v√∫")) addAdvice(true, "C√°c tri·ªáu ch·ª©ng n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn s·ª± thay ƒë·ªïi hormone trong chu k·ª≥.");
              if (o.includes("C·ªï t·ª≠ cung m·ªü r·ªông")) addAdvice(true, "Khi r·ª•ng tr·ª©ng, c·ªï t·ª≠ cung s·∫Ω m·ªÅm, m·ªü v√† cao h∆°n. ƒê√¢y l√† m·ªôt d·∫•u hi·ªáu t·ªët.");
              if (o.includes("√Çm ƒë·∫°o ho·∫∑c √¢m h·ªô b·ªã s∆∞ng")) addAdvice(true, "S·ª± thay ƒë·ªïi hormone c√≥ th·ªÉ g√¢y s∆∞ng nh·∫π. N·∫øu c·∫£m th·∫•y kh√≥ ch·ªãu, b·∫°n n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.");
              if (o.includes("ƒê·∫ßy b·ª•ng")) addAdvice(true, "H√£y ƒÉn c√°c th·ª±c ph·∫©m d·ªÖ ti√™u v√† tr√°nh ƒë·ªì ƒÉn c√≥ nhi·ªÅu gia v·ªã ƒë·ªÉ gi·∫£m kh√≥ ch·ªãu.");
              if (o.includes("ƒê·∫ßy h∆°i")) addAdvice(true, "H√£y ƒÉn c√°c th·ª±c ph·∫©m d·ªÖ ti√™u v√† tr√°nh ƒë·ªì ƒÉn c√≥ nhi·ªÅu gia v·ªã ƒë·ªÉ gi·∫£m kh√≥ ch·ªãu.");
              if (o.includes("Nh·ª©c ƒë·∫ßu")) addAdvice(true, "C√°c tri·ªáu ch·ª©ng n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn r·ª•ng tr·ª©ng ho·∫∑c c√°c y·∫øu t·ªë kh√°c. H√£y ngh·ªâ ng∆°i v√† u·ªëng ƒë·ªß n∆∞·ªõc.");
              if (o.includes("Bu·ªìn n√¥n")) addAdvice(true, "C√°c tri·ªáu ch·ª©ng n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn r·ª•ng tr·ª©ng ho·∫∑c c√°c y·∫øu t·ªë kh√°c. H√£y ngh·ªâ ng∆°i v√† u·ªëng ƒë·ªß n∆∞·ªõc.");
          });

          // üéØ C√¢n n·∫∑ng
          if (rowData['C√¢n n·∫∑ng (kg)']) {
              const weight = parseFloat(rowData['C√¢n n·∫∑ng (kg)']);
              if (weight < 45) addAdvice(true, "C√¢n n·∫∑ng h∆°i th·∫•p, ch√∫ √Ω b·ªï sung dinh d∆∞·ª°ng.");
              if (weight > 70) addAdvice(true, "B·∫°n n√™n t·∫≠p luy·ªán v√† ƒÉn u·ªëng ƒëi·ªÅu ƒë·ªô ƒë·ªÉ gi·ªØ c√¢n n·∫∑ng h·ª£p l√Ω.");
          }

          // üéØ Thu·ªëc
          if (rowData['Thu·ªëc ngo√†i']) addAdvice(true, `B·∫°n ƒëang d√πng thu·ªëc: ${rowData['Thu·ªëc ngo√†i']}. H√£y tu√¢n th·ªß ƒë√∫ng h∆∞·ªõng d·∫´n.`);
          if (rowData['Thu·ªëc tr√°nh thai ƒë∆∞·ªùng u·ªëng (OC)'] === "ƒê√£ u·ªëng b√π/ qu√™n thu·ªëc") addAdvice(true, "H√£y ch√∫ √Ω u·ªëng thu·ªëc ƒë√∫ng gi·ªù ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu qu·∫£ tr√°nh thai.");

          // N·∫øu kh√¥ng c√≥ g√¨ n·ªïi b·∫≠t
          if (!advice) advice = "Kh√¥ng c√≥ v·∫•n ƒë·ªÅ n·ªïi b·∫≠t n√†o h√¥m nay. H√£y ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh nh√©!";
          return advice;
      }